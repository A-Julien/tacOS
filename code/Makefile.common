# This is part of a GNU-Makefile, to specify common parts of the Makefile
# environment.
#
# This gets included as part of the GNU-Makefile used in each of 
# the subdirectories.

# First, find sources and Nachos root dir
topsrc_dir = $(patsubst %/,%,$(dir $(firstword $(wildcard Makefile.sysdep ../Makefile.sysdep ../../Makefile.sysdep))))
NACHOS_SYS := $(shell $(topsrc_dir)/bin/nachos_sys)
NACHOS_ARCH := $(shell $(topsrc_dir)/bin/nachos_arch)

# Flags used anywhere
ASFLAGS+=
CFLAGS+=
CXXFLAGS+=
# Remove -Werror if this is a too big constraint
CPPFLAGS+=-Wall -Werror

# Add include directories from the list in INCDIRS
CPPFLAGS += $(addprefix -I$(topsrc_dir)/,$(INCDIRS))

# Set default make verbosity
# By default, show only main commands
DEFAULT_VERBOSITY=1
# Default setting can be overruled with 'V=x' on make invocation
# Ie: make V=2
# Possible values are :
#   0: show summary
#   1: show only main commands
#   2: show all commands

# Include system specific information (such as native/cross compiler)
include $(topsrc_dir)/Makefile.sysdep

# Set the compiler to use depending on the value of the TARGET variable
# TARGET can be HOST (native compiler) or MIPS (cross compiler)
TARGET?=HOST
EMPTY=
TG=$(TARGET)_
TG_SPC=$(TARGET) $(EMPTY)
CC =$($(TG)CC)
CXX=$($(TG)CXX)
TARGET_ARCH?=$($(TG)TARGET_ARCH)
TARGET_MACH?=$($(TG)TARGET_MACH)
ASFLAGS+=$($(TG)ASFLAGS)
CFLAGS+=$($(TG)CFLAGS)
CXXFLAGS+=$($(TG)CXXFLAGS)
CPPFLAGS+=$($(TG)CPPFLAGS)
LDFLAGS+=$($(TG)LDFLAGS)
LDLIBS+=$($(TG)LDLIBS)

#####################################################################
# define some messages depending on the verbosity
dep_V = $(dep_V_$(V))
dep_V_ = $(dep_V_$(DEFAULT_VERBOSITY))
dep_V_0 = @
dep_V_1 = @

cc_V = $(cc_V_$(V))
cc_V_ = $(cc_V_$(DEFAULT_VERBOSITY))
cc_V_0 = @echo "  [$(TG_SPC)CC]	$@	($<)";

cxx_V = $(cxx_V_$(V))
cxx_V_ = $(cxx_V_$(DEFAULT_VERBOSITY))
cxx_V_0 = @echo "  [$(TG_SPC)CXX]	$@	($<)";

s_V = $(s_V_$(V))
s_V_ = $(s_V_$(DEFAULT_VERBOSITY))
s_V_0 = @echo "  [$(TG_SPC)AS]	$@	($<)";

lko_V = $(lko_V_$(V))
lko_V_ = $(lko_V_$(DEFAULT_VERBOSITY))
lko_V_0 = @echo "  [$(TG_SPC)LINK CC]	$@	($^)";

lkcc_V = $(lkcc_V_$(V))
lkcc_V_ = $(lkcc_V_$(DEFAULT_VERBOSITY))
lkcc_V_0 = @echo "  [$(TG_SPC)LINK CXX]	$@	($^)";

#####################################################################
# define some generic compilation rules

# VD: theses rules come from default make rules but dependencies
# tracking has been added.
# Dependency files are automatically generated by gcc but they are
# partially rewritten in order to be more useful
# VD: automatic dependencies are generated separately if the compiler does
# not support them (old gcc, ie gcc-2.95 when cross-compiling)

OLD_GCC:=$(shell if ! $(CC) --version | grep -sq ' 4\.' ; then echo yes ; fi)
CC_DEPENDS = $(if $(OLD_GCC),,-MMD -MF .$(OBJ_PREFIX)$*.d) 

COMPILE.S = $(CC) $(CC_DEPENDS) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c
COMPILE.c = $(CC) $(CC_DEPENDS) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
COMPILE.cc = $(CXX) $(CC_DEPENDS) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c

$(OBJ_PREFIX)%.o: %.c
	$(cc_V)$(COMPILE.c) $(OUTPUT_OPTION) $<
	$(if $(OLD_GCC),$(dep_V)$(patsubst -c,-MM,$(COMPILE.c)) $< > .$(OBJ_PREFIX)$*.d)
	$(dep_V)cp .$(OBJ_PREFIX)$*.d .$(OBJ_PREFIX)$*.dd && \
	sed < .$(OBJ_PREFIX)$*.dd -e 's/^.*://' -e 's/\([^\\]\)$$/\1:/' >> .$(OBJ_PREFIX)$*.d && \
	rm .$(OBJ_PREFIX)$*.dd

$(OBJ_PREFIX)%.o: %.cc
	$(cxx_V)$(COMPILE.cc) $(OUTPUT_OPTION) $<
	$(if $(OLD_GCC),$(dep_V)$(patsubst -c,-MM,$(COMPILE.cc)) $< > .$(OBJ_PREFIX)$*.d)
	$(dep_V)cp .$(OBJ_PREFIX)$*.d .$(OBJ_PREFIX)$*.dd && \
	sed < .$(OBJ_PREFIX)$*.dd -e 's/^.*://' -e 's/\([^\\]\)$$/\1:/' >> .$(OBJ_PREFIX)$*.d && \
	rm .$(OBJ_PREFIX)$*.dd
$(OBJ_PREFIX)%.o: %.S
	$(s_V)$(COMPILE.S) -o $@ $<
	$(if $(OLD_GCC),$(dep_V)$(patsubst -c,-MM,$(COMPILE.S)) $< > .$(OBJ_PREFIX)$*.d)
	$(dep_V)cp .$(OBJ_PREFIX)$*.d .$(OBJ_PREFIX)$*.dd && \
	sed < .$(OBJ_PREFIX)$*.dd -e 's/^.*://' -e 's/\([^\\]\)$$/\1:/' >> .$(OBJ_PREFIX)$*.d && \
	rm .$(OBJ_PREFIX)$*.dd
%: %.o
	$(lko_V)$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@

# First rule
.PHONY: all
all:

# Default clean rule (double colons so it can be extented)
.PHONY: clean
clean::
	$(RM) core $(PROGRAMS) *.o .*.d
